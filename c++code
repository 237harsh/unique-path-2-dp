class Solution {
public:
   //// memoization
  int sum(int i,int j,vector<vector<int>>& arr,vector<vector<int>>&dp)
    {
      
        if(i==0&&j==0)return 1;
        if(i<0||j<0)return 0;
      if(arr[i][j]==1)return 0;
        if(dp[i][j]!=-1)return dp[i][j];
        
        int up,lt;
        up=sum(i-1,j,arr,dp);
        lt=sum(i,j-1,arr,dp);
        return dp[i][j]=up+lt;
        
    }
    

    int uniquePathsWithObstacles(vector<vector<int>>& arr) {
        int m=arr.size();
        int n=arr[0].size();
        vector<vector<int>>dp(m,vector<int>(n,0));
       
        /* if(m==1&&n==1)
        {
           if(arr[0][0]==0)
               return 1;
            else
                return 0;
        }
           if(arr[0][0]==1)return 0;
        
        int c=0;
        dfs(0,0,m,n,arr,dp,c);
        //return c;
        
        
        return sum(m-1,n-1,arr,dp);*/
        
        //tabulation
        if(arr[0][0]==1)return 0;
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(arr[i][j]==1)continue;
                if(i==0&&j==0)
                {
                    dp[i][j]=1;
                    
                }
                else{ 
                    int dn=0,rt=0;
                if(i>0)dn=dp[i-1][j];
                if(j>0)rt=dp[i][j-1];
                
                dp[i][j]=dn+rt;
                    }
            }
        return dp[m-1][n-1];
    }
};
